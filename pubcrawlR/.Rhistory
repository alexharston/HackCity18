shinyApp(ui, server)
server <- function(input, output, session) {
library(data.table)
source("R/getCrime.R")
source("R/getRoute.R")
source("R/wrapper.R")
source("R/pubFinder.R")
# Define API key
# key <- 'AIzaSyBBm8BH5k410AQ9lr6Rm1HrYyyI8X-gULI'
# Test case
# Start location
x.start <- 51.534186
y.start <- -0.138886
# End location
x.end <- 51.517647
y.end <- -0.119974
start.coord <- c(x.start, y.start)
end.coord <- c(x.end, y.end)
# Get list of pubs
# df <- data.frame(id = 1, polyline = encode_pl(lat = c(x.start, x.end), lon = c(y.start, y.end)))
pubs <- findPubs(x.start, y.start, x.end, y.end, key)
# Get list of a) selected pubs and b) polyline for GoogleMaps
google.polyline <- SelectPubsAndGetRoute(pubs = pubs,
start.coord = start.coord,
end.coord = end.coord,
number_pints = 5,
safe = "safe",
api_key = key)
# print(google.polyline$polyline)
# library(sf)
output$map <- renderGoogle_map({
google_map(key = key, data = google.polyline$selectedpubs, search_box = F) %>%
add_markers(lat = 'lat', lon = 'lng', info_window = 'pub_name') %>%
add_polylines(data = df, polyline = google.polyline$polyline$points, stroke_weight = 9)
# add_drawing(drawing_modes = c('circle'))
})
observeEvent(input$map_map_click, {
print(input$map_map_click)
})
}
library(shiny)
# library(shinysky)
library(dplyr)
library(tidyr)
# library(readr)
library(data.table)
library(googleway)
library(geosphere)
library(getopt)
library(jsonlite)
library(httr)
library(lubridate)
# source('./R/pubFinder.R')
source('./server.R')
# Define API key
key <- 'AIzaSyCVHKD81q7hEu_pAIOtJ50uzaE5GbAfNoA'
set_key(key)
ui <- fluidPage(
fluidRow(
column(12, align="center",
tags$head(
tags$style(HTML("
@import url('https://fonts.googleapis.com/css?family=Lobster');
h1 {
font-family: 'Lobster', Arial, cursive;
font-weight: 300;
line-height: 1.1;
color: #3498db;
text-align: center;
}
p {
font-family: Roboto, sans-serif;
font-size:32pt;
font-weight:300;
color: white;
text-align: center;
}
body {
background-color: #f1c40f;
}
"))
),
# titlePanel('pubcRawl'),
headerPanel("PubBrawl"),
tags$div(
tags$p("Do you want to get into a fight?")
),
actionButton("button", "Come at me mate"),
actionButton("button", "No"),
actionButton("button", "I literally don't care"),
tags$div(
tags$p("Do you want to have a quality time?")
),
actionButton("button", "Yes"),
actionButton("button", "No"),
# Input: Simple integer interval ----
sliderInput("integer", "How many pubs?",
min = 2, max = 10,
value = 1),
google_mapOutput(outputId = "map", height = "600px", width="80%")
)
)
)
shinyApp(ui, server)
google.polyline$selectedpubs
server <- function(input, output, session) {
library(data.table)
source("R/getCrime.R")
source("R/getRoute.R")
source("R/wrapper.R")
source("R/pubFinder.R")
# Define API key
# key <- 'AIzaSyBBm8BH5k410AQ9lr6Rm1HrYyyI8X-gULI'
# Test case
# Start location
x.start <- 51.534186
y.start <- -0.138886
# End location
x.end <- 51.517647
y.end <- -0.119974
start.coord <- c(x.start, y.start)
end.coord <- c(x.end, y.end)
# Get list of pubs
# df <- data.frame(id = 1, polyline = encode_pl(lat = c(x.start, x.end), lon = c(y.start, y.end)))
pubs <- findPubs(x.start, y.start, x.end, y.end, key)
# Get list of a) selected pubs and b) polyline for GoogleMaps
google.polyline <- SelectPubsAndGetRoute(pubs = pubs,
start.coord = start.coord,
end.coord = end.coord,
number_pints = 5,
safe = "safe",
api_key = key)
# print(google.polyline$polyline)
# library(sf)
output$map <- renderGoogle_map({
google_map(key = key, data = google.polyline$selectedpubs, search_box = F) %>%
add_markers(lat = 'lat', lon = 'lng', info_window = list('pub_name', 'rating')) %>%
add_polylines(data = df, polyline = google.polyline$polyline$points, stroke_weight = 9)
# add_drawing(drawing_modes = c('circle'))
})
observeEvent(input$map_map_click, {
print(input$map_map_click)
})
}
library(shiny)
# library(shinysky)
library(dplyr)
library(tidyr)
# library(readr)
library(data.table)
library(googleway)
library(geosphere)
library(getopt)
library(jsonlite)
library(httr)
library(lubridate)
# source('./R/pubFinder.R')
source('./server.R')
# Define API key
key <- 'AIzaSyCVHKD81q7hEu_pAIOtJ50uzaE5GbAfNoA'
set_key(key)
ui <- fluidPage(
fluidRow(
column(12, align="center",
tags$head(
tags$style(HTML("
@import url('https://fonts.googleapis.com/css?family=Lobster');
h1 {
font-family: 'Lobster', Arial, cursive;
font-weight: 300;
line-height: 1.1;
color: #3498db;
text-align: center;
}
p {
font-family: Roboto, sans-serif;
font-size:32pt;
font-weight:300;
color: white;
text-align: center;
}
body {
background-color: #f1c40f;
}
"))
),
# titlePanel('pubcRawl'),
headerPanel("PubBrawl"),
tags$div(
tags$p("Do you want to get into a fight?")
),
actionButton("button", "Come at me mate"),
actionButton("button", "No"),
actionButton("button", "I literally don't care"),
tags$div(
tags$p("Do you want to have a quality time?")
),
actionButton("button", "Yes"),
actionButton("button", "No"),
# Input: Simple integer interval ----
sliderInput("integer", "How many pubs?",
min = 2, max = 10,
value = 1),
google_mapOutput(outputId = "map", height = "600px", width="80%")
)
)
)
shinyApp(ui, server)
?add_markers
pubs <- fread("~/HackCity18/pubs.tsv")
pubs
setorder(pubs, -rating)
pubs
server <- function(input, output, session) {
library(data.table)
source("R/getCrime.R")
source("R/getRoute.R")
source("R/wrapper.R")
source("R/pubFinder.R")
# Define API key
# key <- 'AIzaSyBBm8BH5k410AQ9lr6Rm1HrYyyI8X-gULI'
# Test case
# Start location
x.start <- 51.534186
y.start <- -0.138886
# End location
x.end <- 51.517647
y.end <- -0.119974
start.coord <- c(x.start, y.start)
end.coord <- c(x.end, y.end)
# Get list of pubs
# df <- data.frame(id = 1, polyline = encode_pl(lat = c(x.start, x.end), lon = c(y.start, y.end)))
pubs <- findPubs(x.start, y.start, x.end, y.end, key)
# Get list of a) selected pubs and b) polyline for GoogleMaps
google.polyline <- SelectPubsAndGetRoute(pubs = pubs,
start.coord = start.coord,
end.coord = end.coord,
number_pints = 5,
safe = "safe",
api_key = key)
# print(google.polyline$polyline)
# library(sf)
output$map <- renderGoogle_map({
google_map(key = key, data = google.polyline$selectedpubs, search_box = F) %>%
add_markers(lat = 'lat', lon = 'lng', info_window = 'pub_name') %>%
add_polylines(data = df, polyline = google.polyline$polyline$points, stroke_weight = 9)
# add_drawing(drawing_modes = c('circle'))
})
observeEvent(input$map_map_click, {
print(input$map_map_click)
})
}
library(shiny)
# library(shinysky)
library(dplyr)
library(tidyr)
# library(readr)
library(data.table)
library(googleway)
library(geosphere)
library(getopt)
library(jsonlite)
library(httr)
library(lubridate)
# source('./R/pubFinder.R')
source('./server.R')
# Define API key
key <- 'AIzaSyCVHKD81q7hEu_pAIOtJ50uzaE5GbAfNoA'
set_key(key)
ui <- fluidPage(
fluidRow(
column(12, align="center",
tags$head(
tags$style(HTML("
@import url('https://fonts.googleapis.com/css?family=Lobster');
h1 {
font-family: 'Lobster', Arial, cursive;
font-weight: 300;
line-height: 1.1;
color: #3498db;
text-align: center;
}
p {
font-family: Roboto, sans-serif;
font-size:32pt;
font-weight:300;
color: white;
text-align: center;
}
body {
background-color: #f1c40f;
}
"))
),
# titlePanel('pubcRawl'),
headerPanel("PubBrawl"),
tags$div(
tags$p("Do you want to get into a fight?")
),
actionButton("button", "Come at me mate"),
actionButton("button", "No"),
actionButton("button", "I literally don't care"),
tags$div(
tags$p("Do you want to have a quality time?")
),
actionButton("button", "Yes"),
actionButton("button", "No"),
# Input: Simple integer interval ----
sliderInput("integer", "How many pubs?",
min = 2, max = 10,
value = 1),
google_mapOutput(outputId = "map", height = "600px", width="80%")
)
)
)
shinyApp(ui, server)
google.polyline$selectedpubs
library(ggplot2)
latitude <- "51.52993"
longitudt <- "-0.1334740"
longitude <- "-0.1334740"
# Get polygon vertices
nw <- paste0(latitude - window/2, ",", longitude + window/2)
window = 0.002
year_month = c(paste0(2016, "-", 10:12), paste0(2017, "-0", 1:9))
# Get polygon vertices
nw <- paste0(latitude - window/2, ",", longitude + window/2)
ne <- paste0(latitude + window/2, ",", longitude + window/2)
latitude
latitude <- as.numeric(latitude)
longitude <- as.numeric(longitude)
# Get polygon vertices
nw <- paste0(latitude - window/2, ",", longitude + window/2)
ne <- paste0(latitude + window/2, ",", longitude + window/2)
se <- paste0(latitude + window/2, ",", longitude - window/2)
sw <- paste0(latitude - window/2, ",", longitude - window/2)
# Create URL
url <- "https://data.police.uk"
# path <- 'all-crime?lat=52.629729&lng=-1.131592&date=2017-01'
path <- paste0("api/crimes-street/all-crime?poly=", nw, ":", ne, ":", se, ":", sw, "&date=", year_month)
# Query API
raw.result <- GET(url = url, path = path)
# Parse result into data.table
parsed.dt <- as.data.table(fromJSON(content(raw.result,
type = "text",
encoding = "UTF-8"), flatten = TRUE))
# Select certain crimes
crime.dt <- parsed.dt[category %in% c("anti-social-behaviour",
"drugs",
"violent-crime",
"possession-of-weapons",
"public-order",
"theft-from-the-person")]
parsed.dt
latitude <- 51.53013
longitude <- -0.1247840
# Get polygon vertices
nw <- paste0(latitude - window/2, ",", longitude + window/2)
ne <- paste0(latitude + window/2, ",", longitude + window/2)
se <- paste0(latitude + window/2, ",", longitude - window/2)
sw <- paste0(latitude - window/2, ",", longitude - window/2)
# Create URL
url <- "https://data.police.uk"
# path <- 'all-crime?lat=52.629729&lng=-1.131592&date=2017-01'
path <- paste0("api/crimes-street/all-crime?poly=", nw, ":", ne, ":", se, ":", sw, "&date=", year_month)
# Query API
raw.result <- GET(url = url, path = path)
# Parse result into data.table
parsed.dt <- as.data.table(fromJSON(content(raw.result,
type = "text",
encoding = "UTF-8"), flatten = TRUE))
# Select certain crimes
crime.dt <- parsed.dt[category %in% c("anti-social-behaviour",
"drugs",
"violent-crime",
"possession-of-weapons",
"public-order",
"theft-from-the-person")]
crime.dt
p <- ggplot(crime.dt, aes(x = factor(1), fill = category)) +
geom_bar(width = 1) +
coord_polar(theta = "y") +
labs(title = "",
x = "",
y = "") +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank())
p
p <- ggplot(crime.dt, aes(x = factor(1), fill = category)) +
geom_bar(width = 1) +
coord_polar(theta = "y") +
labs(title = "",
x = "",
y = "") +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.line = element_blank())
p
PlotCrimes <- function(latitude, longitude, year_month = c(paste0(2016, "-", 10:12), paste0(2017, "-0", 1:9)), window = 0.002) {
# https://data.police.uk/api/crimes-street/all-crime?poly=52.268,0.543:52.794,0.238:52.130,0.478&date=2017-01
# Get polygon vertices
nw <- paste0(latitude - window/2, ",", longitude + window/2)
ne <- paste0(latitude + window/2, ",", longitude + window/2)
se <- paste0(latitude + window/2, ",", longitude - window/2)
sw <- paste0(latitude - window/2, ",", longitude - window/2)
# Create URL
url <- "https://data.police.uk"
# path <- 'all-crime?lat=52.629729&lng=-1.131592&date=2017-01'
path <- paste0("api/crimes-street/all-crime?poly=", nw, ":", ne, ":", se, ":", sw, "&date=", year_month)
# Query API
raw.result <- GET(url = url, path = path)
# Parse result into data.table
parsed.dt <- as.data.table(fromJSON(content(raw.result,
type = "text",
encoding = "UTF-8"), flatten = TRUE))
if(nrow(parsed.dt) == 0) {
return(print("No crime"))
} else {
# Select certain crimes
crime.dt <- parsed.dt[category %in% c("anti-social-behaviour",
"drugs",
"violent-crime",
"possession-of-weapons",
"public-order",
"theft-from-the-person")]
p <- ggplot(crime.dt, aes(x = factor(1), fill = category)) +
geom_bar(width = 1) +
coord_polar(theta = "y") +
labs(title = "",
x = "",
y = "") +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.line = element_blank())
p
}
print(p)
}
PlotCrimes(latitude = 51.53013, longitude = -0.1247840)
PlotCrimes <- function(latitude, longitude, year_month = c(paste0(2016, "-", 10:12), paste0(2017, "-0", 1:9)), window = 0.002) {
# https://data.police.uk/api/crimes-street/all-crime?poly=52.268,0.543:52.794,0.238:52.130,0.478&date=2017-01
# Get polygon vertices
nw <- paste0(latitude - window/2, ",", longitude + window/2)
ne <- paste0(latitude + window/2, ",", longitude + window/2)
se <- paste0(latitude + window/2, ",", longitude - window/2)
sw <- paste0(latitude - window/2, ",", longitude - window/2)
# Create URL
url <- "https://data.police.uk"
# path <- 'all-crime?lat=52.629729&lng=-1.131592&date=2017-01'
path <- paste0("api/crimes-street/all-crime?poly=", nw, ":", ne, ":", se, ":", sw, "&date=", year_month)
# Query API
raw.result <- GET(url = url, path = path)
# Parse result into data.table
parsed.dt <- as.data.table(fromJSON(content(raw.result,
type = "text",
encoding = "UTF-8"), flatten = TRUE))
if(nrow(parsed.dt) == 0) {
return(print("No crime"))
} else {
# Select certain crimes
crime.dt <- parsed.dt[category %in% c("anti-social-behaviour",
"drugs",
"violent-crime",
"possession-of-weapons",
"public-order",
"theft-from-the-person")]
p <- ggplot(crime.dt, aes(x = factor(1), fill = category)) +
geom_bar(width = 1) +
coord_polar(theta = "y") +
labs(title = "",
x = "",
y = "",
fill = "") +
theme_classic() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.line = element_blank()) +
scale_fill_brewer(palette = "Set1")
p
}
print(p)
}
PlotCrimes(latitude = 51.53013, longitude = -0.1247840)
p <- ggplot()
p
library(RColorBrewer)
library(ggplot2)
install("rgdal")
install.packages("rgdal")
